import netket as nk
import networkx as nx
import numpy as np
import pytest
from pytest import approx
from scipy.stats import power_divergence, combine_pvalues

samplers = {}

# TESTS FOR SPIN HILBERT
# Constructing a 1d lattice
g = nk.graph.Hypercube(length=4, n_dim=1)

# Hilbert space of spins from given graph
hi = nk.hilbert.Spin(s=0.5, graph=g)
ma = nk.machine.RbmSpin(hilbert=hi, alpha=1)
ma.init_random_parameters(seed=1234, sigma=0.2)

sa = nk.sampler.MetropolisLocal(machine=ma, batch_size=3)
samplers["MetropolisLocal RbmSpin"] = sa


sa = nk.sampler.MetropolisLocalPt(machine=ma, n_replicas=4)
samplers["MetropolisLocalPt RbmSpin"] = sa

ha = nk.operator.Ising(hilbert=hi, h=1.0)
sa = nk.sampler.MetropolisHamiltonian(machine=ma, hamiltonian=ha)
samplers["MetropolisHamiltonian RbmSpin"] = sa

# Test with uniform probability
maz = nk.machine.RbmSpin(hilbert=hi, alpha=1)
maz.init_random_parameters(seed=1234, sigma=0)
sa = nk.sampler.MetropolisLocal(machine=maz, sweep_size=hi.size + 1, batch_size=2)
samplers["MetropolisLocal RbmSpin ZeroPars"] = sa

mas = nk.machine.RbmSpinSymm(hilbert=hi, alpha=1)
mas.init_random_parameters(seed=1234, sigma=0.2)
sa = nk.sampler.MetropolisHamiltonianPt(machine=mas, hamiltonian=ha, n_replicas=4)
samplers["MetropolisHamiltonianPt RbmSpinSymm"] = sa

hi = nk.hilbert.Boson(graph=g, n_max=3)
ma = nk.machine.RbmSpin(hilbert=hi, alpha=1)
ma.init_random_parameters(seed=1234, sigma=0.1)
sa = nk.sampler.MetropolisLocal(machine=ma)
samplers["MetropolisLocal Boson"] = sa

sa = nk.sampler.MetropolisLocalPt(machine=ma, n_replicas=5)
samplers["MetropolisLocalPt Boson"] = sa

hi = nk.hilbert.Spin(s=0.5, graph=g)
g = nk.graph.Hypercube(length=3, n_dim=1)
ma = nk.machine.RbmSpinSymm(hilbert=hi, alpha=1)
ma.init_random_parameters(seed=1234, sigma=0.2)
l = hi.size
X = [[0, 1], [1, 0]]

move_op = nk.operator.LocalOperator(
    hilbert=hi, operators=[X] * l, acting_on=[[i] for i in range(l)]
)


sa = nk.sampler.CustomSampler(machine=ma, move_operators=move_op)
samplers["CustomSampler Spin"] = sa


sa = nk.sampler.CustomSamplerPt(machine=ma, move_operators=move_op, n_replicas=4)
samplers["CustomSamplerPt Spin"] = sa

# Two types of custom moves
# single spin flips and nearest-neighbours exchanges
spsm = [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]]

ops = [X] * l
ops += [spsm] * l

acting_on = [[i] for i in range(l)]
acting_on += [[i, (i + 1) % l] for i in range(l)]

move_op = nk.operator.LocalOperator(hilbert=hi, operators=ops, acting_on=acting_on)

sa = nk.sampler.CustomSampler(machine=ma, move_operators=move_op)
samplers["CustomSampler Spin 2 moves"] = sa

# Diagonal density matrix sampling
ma = nk.machine.NdmSpinPhase(
    hilbert=hi,
    alpha=1,
    beta=1,
    use_visible_bias=True,
    use_hidden_bias=True,
    use_ancilla_bias=True,
)
ma.init_random_parameters(seed=1234, sigma=0.2)
dm = nk.machine.DiagonalDensityMatrix(ma)
sa = nk.sampler.MetropolisLocal(machine=dm)
samplers["Diagonal Density Matrix"] = sa


def test_states_in_hilbert():
    for name, sa in samplers.items():
        print("Sampler test: %s" % name)

        ma = sa.machine
        hi = ma.hilbert
        localstates = hi.local_states

        for sw in range(100):
            sa.sweep()
            visible = sa.visible
            assert visible.shape[1] == hi.size
            for v in visible.reshape(-1):
                assert v in localstates

            if hasattr(sa, "acceptance"):
                assert np.min(sa.acceptance) >= 0 and np.max(sa.acceptance) <= 1.0


def test_machine_func():
    for name, sa in samplers.items():
        print("Sampler test: %s" % name)

        def custom_machine_func(x, out):
            out[:] = np.absolute(x) ** 2.0

        sa.machine_func = custom_machine_func
        x = np.array([3.0 + 1.0j])
        out = np.empty(1)
        sa.machine_func(x, out)
        assert out[0] == approx(np.absolute(3.0 + 1.0j) ** 2.0)

        sa.machine_func = np.absolute
        sa.machine_func(x, out)
        assert out[0] == approx(np.absolute(3.0 + 1.0j))


# Testing that samples generated from direct sampling are compatible with those
# generated by markov chain sampling
# here we use a combination of power divergence tests

from itertools import repeat


def test_correct_sampling():
    for name, sa in samplers.items():
        print("Sampler test: %s" % name)

        ma = sa.machine
        hi = ma.hilbert

        n_states = hi.n_states

        n_samples = max(40 * n_states, 10000)

        ord = np.random.randint(1, 3, size=1)
        assert ord == 1 or ord == 2

        if ord == 1:
            sa.machine_func = np.absolute
        if ord == 2:

            def _f(x, out):
                out[:] = np.absolute(x) ** 2

            sa.machine_func = _f

        ps = np.absolute(ma.to_array()) ** ord
        ps /= ps.sum()

        n_rep = 6
        pvalues = np.zeros(n_rep)

        for jrep in range(n_rep):
            hist_samp = np.zeros(n_states)
            # fill in the histogram for sampler

            # Burnout fase
            for sw in range(n_samples // 10):
                sa.sweep()

            n_s = 0
            for sw in range(n_samples):
                sa.sweep()
                visible = sa.visible

                for v in visible:
                    sttn = hi.state_to_number(v)
                    hist_samp[sttn] += 1
                    n_s += 1

            # expected frequencies
            f_exp = n_s * ps

            statistics, pvalues[jrep] = power_divergence(
                hist_samp, f_exp=f_exp, lambda_=3 / 2
            )

        s, pval = combine_pvalues(pvalues, method="fisher")
        assert pval > 0.01 or np.max(pvalues) > 0.01
